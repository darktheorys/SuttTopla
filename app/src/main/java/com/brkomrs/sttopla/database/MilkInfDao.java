package com.brkomrs.sttopla.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "dbo.Milks".
*/
public class MilkInfDao extends AbstractDao<MilkInf, Long> {

    public static final String TABLENAME = "dbo.Milks";

    /**
     * Properties of entity MilkInf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property TankId = new Property(1, long.class, "TankId", false, "TANK_ID");
        public final static Property TankFilled = new Property(2, int.class, "TankFilled", false, "TANK_FILLED");
        public final static Property MilkType = new Property(3, String.class, "MilkType", false, "MILK_TYPE");
        public final static Property Liter = new Property(4, int.class, "Liter", false, "LITER");
        public final static Property LeaveMilk = new Property(5, boolean.class, "LeaveMilk", false, "LEAVE_MILK");
        public final static Property AntibioticInf = new Property(6, boolean.class, "AntibioticInf", false, "ANTIBIOTIC_INF");
        public final static Property Temp = new Property(7, double.class, "Temp", false, "TEMP");
        public final static Property RTemp = new Property(8, double.class, "RTemp", false, "RTEMP");
        public final static Property AlcoholInf = new Property(9, boolean.class, "AlcoholInf", false, "ALCOHOL_INF");
        public final static Property AlcoholType = new Property(10, String.class, "AlcoholType", false, "ALCOHOL_TYPE");
        public final static Property Comment = new Property(11, String.class, "Comment", false, "COMMENT");
        public final static Property Sync = new Property(12, boolean.class, "Sync", false, "SYNC");
        public final static Property IsTankClean = new Property(13, int.class, "IsTankClean", false, "IS_TANK_CLEAN");
        public final static Property IsPumpClean = new Property(14, int.class, "IsPumpClean", false, "IS_PUMP_CLEAN");
        public final static Property IsEnvClean = new Property(15, int.class, "IsEnvClean", false, "IS_ENV_CLEAN");
        public final static Property IsWeighterClean = new Property(16, int.class, "IsWeighterClean", false, "IS_WEIGHTER_CLEAN");
    }

    private Query<MilkInf> tankInf_MilksQuery;

    public MilkInfDao(DaoConfig config) {
        super(config);
    }
    
    public MilkInfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"dbo.Milks\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"TANK_ID\" INTEGER NOT NULL ," + // 1: TankId
                "\"TANK_FILLED\" INTEGER NOT NULL ," + // 2: TankFilled
                "\"MILK_TYPE\" TEXT," + // 3: MilkType
                "\"LITER\" INTEGER NOT NULL ," + // 4: Liter
                "\"LEAVE_MILK\" INTEGER NOT NULL ," + // 5: LeaveMilk
                "\"ANTIBIOTIC_INF\" INTEGER NOT NULL ," + // 6: AntibioticInf
                "\"TEMP\" REAL NOT NULL ," + // 7: Temp
                "\"RTEMP\" REAL NOT NULL ," + // 8: RTemp
                "\"ALCOHOL_INF\" INTEGER NOT NULL ," + // 9: AlcoholInf
                "\"ALCOHOL_TYPE\" TEXT," + // 10: AlcoholType
                "\"COMMENT\" TEXT," + // 11: Comment
                "\"SYNC\" INTEGER NOT NULL ," + // 12: Sync
                "\"IS_TANK_CLEAN\" INTEGER NOT NULL ," + // 13: IsTankClean
                "\"IS_PUMP_CLEAN\" INTEGER NOT NULL ," + // 14: IsPumpClean
                "\"IS_ENV_CLEAN\" INTEGER NOT NULL ," + // 15: IsEnvClean
                "\"IS_WEIGHTER_CLEAN\" INTEGER NOT NULL );"); // 16: IsWeighterClean
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dbo.Milks\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MilkInf entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getTankId());
        stmt.bindLong(3, entity.getTankFilled());
 
        String MilkType = entity.getMilkType();
        if (MilkType != null) {
            stmt.bindString(4, MilkType);
        }
        stmt.bindLong(5, entity.getLiter());
        stmt.bindLong(6, entity.getLeaveMilk() ? 1L: 0L);
        stmt.bindLong(7, entity.getAntibioticInf() ? 1L: 0L);
        stmt.bindDouble(8, entity.getTemp());
        stmt.bindDouble(9, entity.getRTemp());
        stmt.bindLong(10, entity.getAlcoholInf() ? 1L: 0L);
 
        String AlcoholType = entity.getAlcoholType();
        if (AlcoholType != null) {
            stmt.bindString(11, AlcoholType);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(12, Comment);
        }
        stmt.bindLong(13, entity.getSync() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsTankClean());
        stmt.bindLong(15, entity.getIsPumpClean());
        stmt.bindLong(16, entity.getIsEnvClean());
        stmt.bindLong(17, entity.getIsWeighterClean());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MilkInf entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getTankId());
        stmt.bindLong(3, entity.getTankFilled());
 
        String MilkType = entity.getMilkType();
        if (MilkType != null) {
            stmt.bindString(4, MilkType);
        }
        stmt.bindLong(5, entity.getLiter());
        stmt.bindLong(6, entity.getLeaveMilk() ? 1L: 0L);
        stmt.bindLong(7, entity.getAntibioticInf() ? 1L: 0L);
        stmt.bindDouble(8, entity.getTemp());
        stmt.bindDouble(9, entity.getRTemp());
        stmt.bindLong(10, entity.getAlcoholInf() ? 1L: 0L);
 
        String AlcoholType = entity.getAlcoholType();
        if (AlcoholType != null) {
            stmt.bindString(11, AlcoholType);
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(12, Comment);
        }
        stmt.bindLong(13, entity.getSync() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsTankClean());
        stmt.bindLong(15, entity.getIsPumpClean());
        stmt.bindLong(16, entity.getIsEnvClean());
        stmt.bindLong(17, entity.getIsWeighterClean());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MilkInf readEntity(Cursor cursor, int offset) {
        MilkInf entity = new MilkInf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getLong(offset + 1), // TankId
            cursor.getInt(offset + 2), // TankFilled
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MilkType
            cursor.getInt(offset + 4), // Liter
            cursor.getShort(offset + 5) != 0, // LeaveMilk
            cursor.getShort(offset + 6) != 0, // AntibioticInf
            cursor.getDouble(offset + 7), // Temp
            cursor.getDouble(offset + 8), // RTemp
            cursor.getShort(offset + 9) != 0, // AlcoholInf
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // AlcoholType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Comment
            cursor.getShort(offset + 12) != 0, // Sync
            cursor.getInt(offset + 13), // IsTankClean
            cursor.getInt(offset + 14), // IsPumpClean
            cursor.getInt(offset + 15), // IsEnvClean
            cursor.getInt(offset + 16) // IsWeighterClean
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MilkInf entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTankId(cursor.getLong(offset + 1));
        entity.setTankFilled(cursor.getInt(offset + 2));
        entity.setMilkType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLiter(cursor.getInt(offset + 4));
        entity.setLeaveMilk(cursor.getShort(offset + 5) != 0);
        entity.setAntibioticInf(cursor.getShort(offset + 6) != 0);
        entity.setTemp(cursor.getDouble(offset + 7));
        entity.setRTemp(cursor.getDouble(offset + 8));
        entity.setAlcoholInf(cursor.getShort(offset + 9) != 0);
        entity.setAlcoholType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setComment(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSync(cursor.getShort(offset + 12) != 0);
        entity.setIsTankClean(cursor.getInt(offset + 13));
        entity.setIsPumpClean(cursor.getInt(offset + 14));
        entity.setIsEnvClean(cursor.getInt(offset + 15));
        entity.setIsWeighterClean(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MilkInf entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MilkInf entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MilkInf entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Milks" to-many relationship of TankInf. */
    public List<MilkInf> _queryTankInf_Milks(long TankId) {
        synchronized (this) {
            if (tankInf_MilksQuery == null) {
                QueryBuilder<MilkInf> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TankId.eq(null));
                queryBuilder.orderRaw("T.'TANK_FILLED' ASC");
                tankInf_MilksQuery = queryBuilder.build();
            }
        }
        Query<MilkInf> query = tankInf_MilksQuery.forCurrentThread();
        query.setParameter(0, TankId);
        return query.list();
    }

}
