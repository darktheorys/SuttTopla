package com.brkomrs.sttopla.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tank_tbl".
*/
public class TankInfDao extends AbstractDao<TankInf, Long> {

    public static final String TABLENAME = "tank_tbl";

    /**
     * Properties of entity TankInf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TankId = new Property(0, Long.class, "tankId", true, "_id");
        public final static Property Truck = new Property(1, long.class, "truck", false, "TRUCK");
        public final static Property TankN = new Property(2, int.class, "tankN", false, "TANK_N");
        public final static Property Limit = new Property(3, int.class, "limit", false, "LIMIT");
        public final static Property Fullness = new Property(4, int.class, "fullness", false, "FULLNESS");
    }


    public TankInfDao(DaoConfig config) {
        super(config);
    }
    
    public TankInfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tank_tbl\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tankId
                "\"TRUCK\" INTEGER NOT NULL ," + // 1: truck
                "\"TANK_N\" INTEGER NOT NULL ," + // 2: tankN
                "\"LIMIT\" INTEGER NOT NULL ," + // 3: limit
                "\"FULLNESS\" INTEGER NOT NULL );"); // 4: fullness
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tank_tbl\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TankInf entity) {
        stmt.clearBindings();
 
        Long tankId = entity.getTankId();
        if (tankId != null) {
            stmt.bindLong(1, tankId);
        }
        stmt.bindLong(2, entity.getTruck());
        stmt.bindLong(3, entity.getTankN());
        stmt.bindLong(4, entity.getLimit());
        stmt.bindLong(5, entity.getFullness());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TankInf entity) {
        stmt.clearBindings();
 
        Long tankId = entity.getTankId();
        if (tankId != null) {
            stmt.bindLong(1, tankId);
        }
        stmt.bindLong(2, entity.getTruck());
        stmt.bindLong(3, entity.getTankN());
        stmt.bindLong(4, entity.getLimit());
        stmt.bindLong(5, entity.getFullness());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TankInf readEntity(Cursor cursor, int offset) {
        TankInf entity = new TankInf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tankId
            cursor.getLong(offset + 1), // truck
            cursor.getInt(offset + 2), // tankN
            cursor.getInt(offset + 3), // limit
            cursor.getInt(offset + 4) // fullness
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TankInf entity, int offset) {
        entity.setTankId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTruck(cursor.getLong(offset + 1));
        entity.setTankN(cursor.getInt(offset + 2));
        entity.setLimit(cursor.getInt(offset + 3));
        entity.setFullness(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TankInf entity, long rowId) {
        entity.setTankId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TankInf entity) {
        if(entity != null) {
            return entity.getTankId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TankInf entity) {
        return entity.getTankId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
