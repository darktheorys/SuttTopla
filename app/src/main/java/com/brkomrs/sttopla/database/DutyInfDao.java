package com.brkomrs.sttopla.database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "dbo.Duties".
*/
public class DutyInfDao extends AbstractDao<DutyInf, Long> {

    public static final String TABLENAME = "dbo.Duties";

    /**
     * Properties of entity DutyInf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property TruckId = new Property(1, long.class, "TruckId", false, "TRUCK_ID");
        public final static Property FarmId = new Property(2, long.class, "FarmId", false, "FARM_ID");
        public final static Property Sync = new Property(3, boolean.class, "Sync", false, "SYNC");
        public final static Property Done = new Property(4, boolean.class, "Done", false, "DONE");
    }

    private DaoSession daoSession;

    private Query<DutyInf> truckInf_DutiesQuery;

    public DutyInfDao(DaoConfig config) {
        super(config);
    }
    
    public DutyInfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"dbo.Duties\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Id
                "\"TRUCK_ID\" INTEGER NOT NULL ," + // 1: TruckId
                "\"FARM_ID\" INTEGER NOT NULL ," + // 2: FarmId
                "\"SYNC\" INTEGER NOT NULL ," + // 3: Sync
                "\"DONE\" INTEGER NOT NULL );"); // 4: Done
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"dbo.Duties\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DutyInf entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getTruckId());
        stmt.bindLong(3, entity.getFarmId());
        stmt.bindLong(4, entity.getSync() ? 1L: 0L);
        stmt.bindLong(5, entity.getDone() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DutyInf entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getTruckId());
        stmt.bindLong(3, entity.getFarmId());
        stmt.bindLong(4, entity.getSync() ? 1L: 0L);
        stmt.bindLong(5, entity.getDone() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(DutyInf entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DutyInf readEntity(Cursor cursor, int offset) {
        DutyInf entity = new DutyInf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getLong(offset + 1), // TruckId
            cursor.getLong(offset + 2), // FarmId
            cursor.getShort(offset + 3) != 0, // Sync
            cursor.getShort(offset + 4) != 0 // Done
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DutyInf entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTruckId(cursor.getLong(offset + 1));
        entity.setFarmId(cursor.getLong(offset + 2));
        entity.setSync(cursor.getShort(offset + 3) != 0);
        entity.setDone(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DutyInf entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DutyInf entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DutyInf entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Duties" to-many relationship of TruckInf. */
    public List<DutyInf> _queryTruckInf_Duties(long TruckId) {
        synchronized (this) {
            if (truckInf_DutiesQuery == null) {
                QueryBuilder<DutyInf> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.TruckId.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                truckInf_DutiesQuery = queryBuilder.build();
            }
        }
        Query<DutyInf> query = truckInf_DutiesQuery.forCurrentThread();
        query.setParameter(0, TruckId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFarmInfDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getTruckInfDao().getAllColumns());
            builder.append(" FROM dbo.Duties T");
            builder.append(" LEFT JOIN dbo.Farms T0 ON T.\"FARM_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN dbo.Trucks T1 ON T.\"TRUCK_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DutyInf loadCurrentDeep(Cursor cursor, boolean lock) {
        DutyInf entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FarmInf Farm = loadCurrentOther(daoSession.getFarmInfDao(), cursor, offset);
         if(Farm != null) {
            entity.setFarm(Farm);
        }
        offset += daoSession.getFarmInfDao().getAllColumns().length;

        TruckInf Truck = loadCurrentOther(daoSession.getTruckInfDao(), cursor, offset);
         if(Truck != null) {
            entity.setTruck(Truck);
        }

        return entity;    
    }

    public DutyInf loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DutyInf> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DutyInf> list = new ArrayList<DutyInf>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DutyInf> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DutyInf> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
