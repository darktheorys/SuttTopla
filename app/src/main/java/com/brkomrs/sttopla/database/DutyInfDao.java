package com.brkomrs.sttopla.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DUTY_INF".
*/
public class DutyInfDao extends AbstractDao<DutyInf, Long> {

    public static final String TABLENAME = "DUTY_INF";

    /**
     * Properties of entity DutyInf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DutyId = new Property(0, Long.class, "dutyId", true, "_id");
        public final static Property User = new Property(1, long.class, "user", false, "USER");
        public final static Property Farm_id = new Property(2, long.class, "farm_id", false, "FARM_ID");
        public final static Property Done = new Property(3, boolean.class, "done", false, "DONE");
    }


    public DutyInfDao(DaoConfig config) {
        super(config);
    }
    
    public DutyInfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DUTY_INF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: dutyId
                "\"USER\" INTEGER NOT NULL ," + // 1: user
                "\"FARM_ID\" INTEGER NOT NULL ," + // 2: farm_id
                "\"DONE\" INTEGER NOT NULL );"); // 3: done
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DUTY_INF\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DutyInf entity) {
        stmt.clearBindings();
 
        Long dutyId = entity.getDutyId();
        if (dutyId != null) {
            stmt.bindLong(1, dutyId);
        }
        stmt.bindLong(2, entity.getUser());
        stmt.bindLong(3, entity.getFarm_id());
        stmt.bindLong(4, entity.getDone() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DutyInf entity) {
        stmt.clearBindings();
 
        Long dutyId = entity.getDutyId();
        if (dutyId != null) {
            stmt.bindLong(1, dutyId);
        }
        stmt.bindLong(2, entity.getUser());
        stmt.bindLong(3, entity.getFarm_id());
        stmt.bindLong(4, entity.getDone() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DutyInf readEntity(Cursor cursor, int offset) {
        DutyInf entity = new DutyInf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dutyId
            cursor.getLong(offset + 1), // user
            cursor.getLong(offset + 2), // farm_id
            cursor.getShort(offset + 3) != 0 // done
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DutyInf entity, int offset) {
        entity.setDutyId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.getLong(offset + 1));
        entity.setFarm_id(cursor.getLong(offset + 2));
        entity.setDone(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DutyInf entity, long rowId) {
        entity.setDutyId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DutyInf entity) {
        if(entity != null) {
            return entity.getDutyId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DutyInf entity) {
        return entity.getDutyId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
