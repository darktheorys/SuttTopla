package com.brkomrs.sttopla.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tir_tbl".
*/
public class TruckInfDao extends AbstractDao<TruckInf, Long> {

    public static final String TABLENAME = "tir_tbl";

    /**
     * Properties of entity TruckInf.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TruckId = new Property(0, Long.class, "truckId", true, "_id");
        public final static Property User = new Property(1, long.class, "user", false, "USER");
        public final static Property N_tank = new Property(2, int.class, "n_tank", false, "N_TANK");
        public final static Property Plate = new Property(3, String.class, "plate", false, "PLATE");
    }


    public TruckInfDao(DaoConfig config) {
        super(config);
    }
    
    public TruckInfDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tir_tbl\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: truckId
                "\"USER\" INTEGER NOT NULL ," + // 1: user
                "\"N_TANK\" INTEGER NOT NULL ," + // 2: n_tank
                "\"PLATE\" TEXT);"); // 3: plate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tir_tbl\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TruckInf entity) {
        stmt.clearBindings();
 
        Long truckId = entity.getTruckId();
        if (truckId != null) {
            stmt.bindLong(1, truckId);
        }
        stmt.bindLong(2, entity.getUser());
        stmt.bindLong(3, entity.getN_tank());
 
        String plate = entity.getPlate();
        if (plate != null) {
            stmt.bindString(4, plate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TruckInf entity) {
        stmt.clearBindings();
 
        Long truckId = entity.getTruckId();
        if (truckId != null) {
            stmt.bindLong(1, truckId);
        }
        stmt.bindLong(2, entity.getUser());
        stmt.bindLong(3, entity.getN_tank());
 
        String plate = entity.getPlate();
        if (plate != null) {
            stmt.bindString(4, plate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TruckInf readEntity(Cursor cursor, int offset) {
        TruckInf entity = new TruckInf( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // truckId
            cursor.getLong(offset + 1), // user
            cursor.getInt(offset + 2), // n_tank
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // plate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TruckInf entity, int offset) {
        entity.setTruckId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.getLong(offset + 1));
        entity.setN_tank(cursor.getInt(offset + 2));
        entity.setPlate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TruckInf entity, long rowId) {
        entity.setTruckId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TruckInf entity) {
        if(entity != null) {
            return entity.getTruckId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TruckInf entity) {
        return entity.getTruckId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
